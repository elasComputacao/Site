"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.derivePath = derivePath;

var _lodash = _interopRequireDefault(require("lodash"));

var _slugify = _interopRequireDefault(require("slugify"));

var _pathUtils = require("./path-utils");

// Generates the path for the page from the file path
// product/{Product.id}.js => /product/:id, pulls from nodes.id
// product/{Product.sku__en} => product/:sku__en pulls from nodes.sku.en
// blog/{MarkdownRemark.parent__(File)__relativePath}} => blog/:slug pulls from nodes.parent.relativePath
function derivePath(path, node, reporter) {
  // 1.  Remove the extension
  var pathWithoutExtension = (0, _pathUtils.removeFileExtension)(path); // 2.  Pull out the slug parts that are within { } brackets.

  var slugParts = (0, _pathUtils.extractAllCollectionSegments)(path); // 3.  For each slug parts get the actual value from the node data

  slugParts.forEach(function (slugPart) {
    // 3.a. this transforms foo__bar into foo.bar
    var key = (0, _pathUtils.compose)(_pathUtils.extractFieldWithoutUnion, _pathUtils.switchToPeriodDelimiters)(slugPart); // 3.b  We do node or node.nodes here because we support the special group
    //      graphql field, which then moves nodes in another depth

    var nodeValue = _lodash.default.get(node.nodes, "[0]" + key) || _lodash.default.get(node, key); // 3.c  log error if the key does not exist on node


    if (nodeValue === undefined) {
      reporter.error("PageCreator: Could not find value in the following node for key " + slugPart + " (transformed to " + key + ")");
      reporter.log(JSON.stringify(node, null, 4));
      return;
    } // If the node value is meant to be a slug, like `foo/bar`, the slugify
    // function will remove the slashes. This is a hack to make sure the slashes
    // stick around in the final url structuring


    var replaceSlashesValue = (nodeValue + "").replace(/\//g, "(REPLACED)");
    var slugifiedWithoutSlashesValue = (0, _slugify.default)(replaceSlashesValue, {
      lower: true
    });
    var value = slugifiedWithoutSlashesValue.replace(/\(REPLACED\)/gi, "/"); // 3.d  replace the part of the slug with the actual value

    pathWithoutExtension = pathWithoutExtension.replace(slugPart, value);
  });
  return pathWithoutExtension;
}