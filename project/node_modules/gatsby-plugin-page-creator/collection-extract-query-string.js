"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.collectionExtractQueryString = collectionExtractQueryString;

var _babelParseToAst = require("gatsby/dist/utils/babel-parse-to-ast");

var _extractQuery = require("./extract-query");

var _babelPluginRemoveGraphqlQueries = require("babel-plugin-remove-graphql-queries");

var _fsExtra = _interopRequireDefault(require("fs-extra"));

var _traverse = _interopRequireDefault(require("@babel/traverse"));

var _pathUtils = require("./path-utils");

// This Function opens up the actual collection file and extracts the queryString used in the
function collectionExtractQueryString(absolutePath, reporter) {
  var queryString = null;
  var modelType = (0, _pathUtils.extractModel)(absolutePath); // This can happen if you have an invalid path and you are trying to query for that path
  // our path graphql resolution logic does not validate the path before calling this
  // so it can hit this case.

  if (!modelType) return null; // 1.  Read the file and scan for a use of unstable_collectionGraphql

  var fileContents = _fsExtra.default.readFileSync(absolutePath).toString(); // 2.  If the user is using the collectionGraphql function, we have to
  //     parse the file and extract it's contents


  if (fileContents.includes("unstable_collectionGraphql")) {
    var ast = (0, _babelParseToAst.babelParseToAst)(fileContents, absolutePath);
    (0, _traverse.default)(ast, {
      ExportNamedDeclaration: function ExportNamedDeclaration(path) {
        if (path.node.source) {
          return;
        }

        path.traverse({
          TaggedTemplateExpression: function TaggedTemplateExpression(path) {
            var _getGraphQLTag = (0, _babelPluginRemoveGraphqlQueries.getGraphQLTag)(path, "unstable_collectionGraphql"),
                text = _getGraphQLTag.text;

            if (!text) return;

            if (text.includes("...CollectionPagesQueryFragment") === false) {
              reporter.error("PageCreator: Your collection graphql query is incorrect. You must use the fragment \"...CollectionPagesQueryFragment\" to pull data nodes\n\nPlease fix the query from " + absolutePath.split("src/pages")[1] + ".\n\nOffending query: " + text);
              queryString = "";
              modelType = "";
              return;
            }

            queryString = text;
          }
        });
      }
    });
  } // 3  This is important, we get the model or query, but we have to create a real graphql
  //    query from it. This generateQueryFromString call does all of that magic


  queryString = (0, _extractQuery.generateQueryFromString)(queryString || modelType, absolutePath);
  return queryString;
}