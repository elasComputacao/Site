"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.isValidCollectionPathImplementation = isValidCollectionPathImplementation;

var _path = _interopRequireDefault(require("path"));

// This file is a helper for consumers. It's going to log an error to them if they
// in any way have an incorrect filepath setup for us to predictably use collection
// querying.
//
// Without this, users will can get mystic errors.
function isValidCollectionPathImplementation(filePath, reporter) {
  var parts = filePath.split(_path.default.sep);
  var passing = true;
  parts.forEach(function (part) {
    var _part$match, _part$match2, _part$match3;

    if (passing === false) return;
    if (!part.startsWith("{")) return;
    var opener = part.slice(0);
    var model = (_part$match = part.match(/{([a-zA-Z]+)./)) === null || _part$match === void 0 ? void 0 : _part$match[1];
    var field = (_part$match2 = part.match(/\.([a-zA-Z_()]+)}/)) === null || _part$match2 === void 0 ? void 0 : _part$match2[1];
    var closer = (_part$match3 = part.match(/\}/)) === null || _part$match3 === void 0 ? void 0 : _part$match3[0];

    try {
      assert(opener, "{", ""); // This is a noop because of the opening check, but here for posterity

      assert(model, /^[A-Z][a-zA-Z]+$/, errorMessage(filePath, part));
      assert(field, /^[a-zA-Z_()]+$/, errorMessage(filePath, part));
      assert(closer, "}", errorMessage(filePath, part));
    } catch (e) {
      reporter.panicOnBuild(e.message);
      passing = false;
    }
  });
  return passing;
}

function errorMessage(filePath, part) {
  return "PageCreator: Collection page builder encountered an error parsing the filepath. To use collection paths the schema to follow is {Model.field}. The problematic part is: " + part + ".\nfilePath: " + filePath;
}

function assert(part, matches, message) {
  var regexp = matches instanceof RegExp ? matches : new RegExp(matches);

  if (!part || regexp.test(part) === false) {
    throw new Error(message);
  }
}